"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

# buildifier: disable=load
load(
    "@rules_rust//rust:defs.bzl",
    "rust_binary",
    "rust_library",
    "rust_proc_macro",
    "rust_test",
)

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//cargo", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # Apache-2.0 from expression "Apache-2.0"
])

# Generated Targets
# buildifier: disable=out-of-order-load
# buildifier: disable=load-on-top
load(
    "@rules_rust//cargo:cargo_build_script.bzl",
    "cargo_build_script",
)

cargo_build_script(
    name = "winit_build_script",
    srcs = glob(["**/*.rs"]),
    build_script_env = {
    },
    crate_features = [
        "fnv",
        "memmap2",
        "percent-encoding",
        "sctk",
        "wayland",
        "wayland-backend",
        "wayland-client",
        "wayland-protocols",
        "x11",
        "x11-dl",
    ],
    crate_root = "build.rs",
    data = glob(["**"]),
    edition = "2021",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.29.0-beta.0",
    visibility = ["//visibility:private"],
    deps = [
        "//cargo/vendor/cfg_aliases-0.1.1:cfg_aliases",
    ] + selects.with_or({
        (
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
        ],
        "//conditions:default": [],
    }),
)

# Unsupported target "child_window" with type "example" omitted

# Unsupported target "control_flow" with type "example" omitted

# Unsupported target "cursor" with type "example" omitted

# Unsupported target "cursor_grab" with type "example" omitted

# Unsupported target "custom_events" with type "example" omitted

# Unsupported target "drag_window" with type "example" omitted

# Unsupported target "fullscreen" with type "example" omitted

# Unsupported target "handling_close" with type "example" omitted

# Unsupported target "ime" with type "example" omitted

# Unsupported target "key_binding" with type "example" omitted

# Unsupported target "monitor_list" with type "example" omitted

# Unsupported target "mouse_wheel" with type "example" omitted

# Unsupported target "multithreaded" with type "example" omitted

# Unsupported target "multiwindow" with type "example" omitted

# Unsupported target "request_redraw" with type "example" omitted

# Unsupported target "request_redraw_threaded" with type "example" omitted

# Unsupported target "resizable" with type "example" omitted

# Unsupported target "theme" with type "example" omitted

# Unsupported target "timer" with type "example" omitted

# Unsupported target "touchpad_gestures" with type "example" omitted

# Unsupported target "transparent" with type "example" omitted

# Unsupported target "video_modes" with type "example" omitted

# Unsupported target "web" with type "example" omitted

# Unsupported target "web_aspect_ratio" with type "example" omitted

# Unsupported target "window" with type "example" omitted

# Unsupported target "window_buttons" with type "example" omitted

# Unsupported target "window_debug" with type "example" omitted

# Unsupported target "window_drag_resize" with type "example" omitted

# Unsupported target "window_icon" with type "example" omitted

# Unsupported target "window_option_as_alt" with type "example" omitted

# Unsupported target "window_resize_increments" with type "example" omitted

# Unsupported target "window_run_return" with type "example" omitted

rust_library(
    name = "winit",
    srcs = glob(["**/*.rs"]),
    aliases = {
        "//cargo/vendor/raw-window-handle-0.5.2:raw_window_handle": "raw_window_handle",
        "//cargo/vendor/smithay-client-toolkit-0.17.0:smithay_client_toolkit": "sctk",
    },
    crate_features = [
        "fnv",
        "memmap2",
        "percent-encoding",
        "sctk",
        "wayland",
        "wayland-backend",
        "wayland-client",
        "wayland-protocols",
        "x11",
        "x11-dl",
    ],
    crate_root = "src/lib.rs",
    data = [],
    edition = "2021",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=winit",
        "manual",
    ],
    version = "0.29.0-beta.0",
    # buildifier: leave-alone
    deps = [
        "//cargo/vendor/bitflags-2.3.3:bitflags",
        "//cargo/vendor/cursor-icon-1.0.0:cursor_icon",
        "//cargo/vendor/log-0.4.19:log",
        "//cargo/vendor/once_cell-1.18.0:once_cell",
        "//cargo/vendor/raw-window-handle-0.5.2:raw_window_handle",
        "//cargo/vendor/smol_str-0.2.0:smol_str",
        ":winit_build_script",
    ] + selects.with_or({
        (
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
            "//cargo/vendor/calloop-0.10.6:calloop",
            "//cargo/vendor/fnv-1.0.7:fnv",
            "//cargo/vendor/libc-0.2.147:libc",
            "//cargo/vendor/memmap2-0.5.10:memmap2",
            "//cargo/vendor/percent-encoding-2.3.0:percent_encoding",
            "//cargo/vendor/smithay-client-toolkit-0.17.0:smithay_client_toolkit",
            "//cargo/vendor/wayland-backend-0.1.2:wayland_backend",
            "//cargo/vendor/wayland-client-0.30.2:wayland_client",
            "//cargo/vendor/wayland-protocols-0.30.1:wayland_protocols",
            "//cargo/vendor/x11-dl-2.21.0:x11_dl",
            "//cargo/vendor/xkbcommon-dl-0.4.1:xkbcommon_dl",
        ],
        "//conditions:default": [],
    }),
)

# Unsupported target "send_objects" with type "test" omitted

# Unsupported target "serde_objects" with type "test" omitted

# Unsupported target "sync_object" with type "test" omitted
