extern crate vbo;
extern crate shader;
extern crate material;
extern crate gl_context;
extern crate gl_utils;

use gl_error::CheckError;
use gl_context::gl;
use gl_context::gl::types::GLuint;

pub static VERTEX_DATA_TRIS: [f32; 15] = [
    -0.5, -0.5,  1.0,  0.0,  0.0,
     0.0,  0.5,  0.0,  1.0,  0.0,
     0.5, -0.5,  0.0,  0.0,  1.0,
];


pub static VERTEX_DATA_RECT: [f32; 60] = [
 -1.0,  1.0, 0.0,1.0,  0.0,0.0,1.0,1.0,  0.0,1.0,
  1.0,  1.0, 0.0,1.0,  0.0,0.0,1.0,1.0,  1.0,1.0,
 -1.0, -1.0, 0.0,1.0,  0.0,0.0,1.0,1.0,  0.0,0.0,

 -1.0, -1.0, 0.0, 1.0,  0.0,0.0,1.0,1.0,  0.0,0.0,
  1.0,  1.0, 0.0, 1.0,  0.0,0.0,1.0,1.0,  1.0,1.0,
  1.0, -1.0, 0.0, 1.0,  0.0,0.0,1.0,1.0,  1.0,0.0,
];

const VERTEX_DATA_CUBE: [f32; 360] = [
    // Front face
    -0.5, -0.5, 0.5, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.5, -0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0,
    0.5, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,
    -0.5, -0.5, 0.5, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.5, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,
    -0.5, 0.5, 0.5, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,

    // Back face
    -0.5, -0.5, -0.5, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.5, -0.5, -0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0,
    0.5, 0.5, -0.5, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0,
    -0.5, -0.5, -0.5, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.5, 0.5, -0.5, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0,
    -0.5, 0.5, -0.5, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0,

    // Left face
    -0.5, -0.5, -0.5, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,
    -0.5, -0.5, 0.5, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0,
    -0.5, 0.5, 0.5, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0,
    -0.5, -0.5, -0.5, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,
    -0.5, 0.5, 0.5, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0,
    -0.5, 0.5, -0.5, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,

    // Right face
    0.5, -0.5, 0.5, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.5, -0.5, -0.5, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0,
    0.5, 0.5, -0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,
    0.5, -0.5, 0.5, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.5, 0.5, -0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,
    0.5, 0.5, 0.5, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,

    // Top face
    -0.5, 0.5, 0.5, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.5, 0.5, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0,
    0.5, 0.5, -0.5, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0,
    -0.5, 0.5, 0.5, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.5, 0.5, -0.5, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0,
    -0.5, 0.5, -0.5, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0,

    // Bottom face
    -0.5, -0.5, -0.5, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,
    0.5, -0.5, -0.5, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0,
    0.5, -0.5, 0.5, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0,
    -0.5, -0.5, -0.5, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,
    0.5, -0.5, 0.5, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0,
    -0.5, -0.5, 0.5, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
];


#[derive(Clone)]
pub struct Attribute{
    data : vbo::Vbo,
    layout : shader::Layout,
}

/*
 * Mesh is an owning object of graphics resources
 * Other things should have refernces to Mesh
 */
#[derive(Clone)]
pub struct Mesh{
   vertex : Attribute,
   uv : Attribute,
   normal : Attribute,
}

impl Mesh{
    pub fn NewCube(gl_context : &gl::Gl) -> Self{
        let vbo_buffer = vbo::Vbo::new();
        vbo_buffer.Load(gl_context,&VERTEX_DATA_CUBE);
        
        return Self{
            vertex : Attribute{
                data : vbo_buffer.clone(),
                layout : shader::Layout{
                    count : 4,
                    stride : 10,
                    offset : 0,
                }
            },
            uv : Attribute{
                data : vbo_buffer.clone(),
                layout : shader::Layout{
                    count :  2,
                    stride : 10,
                    offset : 8,
                }
            },
            normal : Attribute{
                data : vbo_buffer.clone(),
                layout : shader::Layout{
                    count :  4,
                    stride : 10,
                    offset : 4,
                }
            }
        }
    }
}
